
/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * From Project Euler
 * https://projecteuler.net/problem=2
 *
 */

// Recursive Solution
function sumEvenFib3(prev, n, sum) {
  if (n % 2 === 0) {
    sum += n;
  }
  if (n < 4000000) {
    return sumEvenFib3(n, n + prev, sum);
  }
  return sum;
}

sumEvenFib3(1, 1, 0);


// Iterative Solution
function fibonacciSequence(n) {
  const numbers = [0, 1];

  while (numbers[numbers.length - 1] < n) {
    numbers.push(numbers[numbers.length - 1] + numbers[numbers.length - 2]);
  }

  return numbers;
}

function sumEvenFib(n) {
  const fib = fibonacciSequence(n);

  return fib.reduce((acc, curr) => {
    return curr % 2 === 0 ? acc += curr : acc;
  });
}

sumEvenFib(4000000);


//  Iterative Solution 2
function sumEvenFib2(n1, n2) {
  let sum = 0;

  while (n1 < 4000000) {
    if (n1 % 2 === 0) {
      sum += n1;
    }
    const temp = n1 + n2;
    n1 = n2;
    n2 = temp;
  }
  return sum;
}

sumEvenFib2(1, 1);
